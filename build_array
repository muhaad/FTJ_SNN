
import subprocess
import os
import pexpect
import time
rows = 21
cols = 1
file_name = f"lif_array_{rows}x{cols}"
path = f"/home/muhaad/Public/{file_name}/"
hspice_path = "/opt-shared-v2/eda/synopsys/hspice/current/hspice/bin/hspice"

def run_hspice(path, input_file_name, output_file_name):
    env = os.environ.copy()
    env["PATH"] = "/opt/eda/bin/magic:/opt/eda/synopsys/wv/current/bin:/opt/eda/bin/irsim:/opt/eda/synopsys/hspice/current/hspice/bin:/opt/eda/cadence/SPECTRE231/tools/bin:/opt/eda/cadence/:SPECTRE231/tools/bin:/opt/eda/cadence/IC231/tools/dfII/bin:/opt/eda/cadence/IC231/bin:/opt/eda/cadence/INNOVUS211/bin:/opt/eda/cadence/GENUS211/bin:opt/eda/synopsys/icc2/V-2023.12-SP4/bin/:/opt/eda/fpga/intelFPGA_lite/current/quartus/bin:/opt/eda/fpga/intelFPGA_pro/current/modelsim_ase/bin:/opt/eda/cadence/jasper_2018.09p001/bin:/opt/eda/synopsys/current/vcs-mx/bin:/opt/eda/synopsys/current/syn/bin:/opt/eda/synopsys/current/txs/bin:/opt/eda/synopsys/sentaurus/current/bin:/opt/eda/synopsys/customcompiler/current/bin:/opt/eda/synopsys/taurus_medici/current/bin:/opt/eda/synopsys/pts/current/bin:/usr/local/go/bin:/opt/eda/mmi/current/bin:/opt/eda/synopsys/vcs-mx/current/bin:/opt/eda/synopsys/syn/current/bin:/home/muhaad/bin:/usr/bin:/bin:/usr/local/bin:/opt/bin:/opt/eda/bin:/opt/eda/cadtools/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin"
    child = pexpect.spawn("tcsh", encoding="utf-8")

    child.logfile = open("tcsh_log.txt", "w")  # or: sys.stdout
    child.sendline(f"hspice -i {path}{input_file_name}.sp -o {path}{output_file_name}.lis ; exit")
    child.expect(pexpect.EOF, timeout = None)
    child.close()
    print(output_file_name)

    #print(child.before)

def read_weights(filename):
    weights = []
    with open(filename, 'r') as file:
        lines = file.readlines()
        for line in lines:
            col_weights = []
            stripped_line = line.strip().split(",")
            col_weights = [float(int(i)*1.5) for i in stripped_line]
            weights.append(col_weights)
    # for column in weights:
    #     for weight in column:
    #         print(weight)
    #     print('\n')
    return(weights)


def read_inputs(filename):
    inputs = []
    with open(filename, 'r') as file:
        lines = file.readlines()
        col_weights = [float(i.strip()) for i in lines]

    # for column in weights:
    #     for weight in column:
    #         print(weight)
    #     print('\n')
    return(inputs)    


def pwl(pulses, voltage, zero_level=0):     #accepts lists of (delay, width) or just single tuples

    rise_time = 0.001 
    fall_time = 0.001 
    points = [(0, zero_level)]

    if isinstance(pulses, tuple):  # If it's a single tuple
        pulses = [pulses]  # Convert it into a list of one tuple

    for delay, width in pulses:
        t_rise = delay + rise_time
        t_fall = delay + width
        t_post_fall = t_fall + fall_time
        points += [
            (delay, zero_level),
            (t_rise, voltage),
            (t_fall, voltage),
            (t_post_fall, zero_level)
        ]

    # Format the PWL string
    pwl_str = "PWL(" + " ".join([f"{t}n {v}V" for t, v in points]) + ")"
    return pwl_str

def generate_hspice(filename, weights = []):

    ##global variables##
    global rows
    global cols

    reset_time = 100                ##reset pulse time in nanoseconds
    time_counter = 10               #current program time. Initialization value determines delay until reset pulse from simulation start
    time_init = time_counter
    inference_time = 5000                #runtime of simulation in nanoseconds
    batch = 7                      #number of rows included in each reset batch

    dir = os.path.dirname(path)

    if dir and not os.path.exists(dir):
        os.makedirs(dir)

    with open(f"{path}{filename}.sp", 'w') as f:
        # Includes and headers
        f.write('\n')                                               #Dont write anything on the first line
        f.write(".include '/home/muhaad/Public/LIF/LIF.sp'\n")         #lif model
        f.write(".include '/home/muhaad/Public/model_t36s.sp'\n")       #transistor model
        f.write('.hdl "/home/muhaad/Public/FTJ.va"\n')                                    #FTJ model

        # Global supply
        f.write("V1 Vdd 0 DC 3.3V\n")
        f.write("V2 Vspike 0 DC 1V\n")
        f.write("V_reset Vr 0 4V\n") 

        #control signals

        #reset

        reset_pulses = []           #row reset pulse

        for i in range(1, rows + 1):
            reset_pulses.append((time_counter, reset_time))
            f.write(f"V_R{i}_ground R{i}G 0 {pwl((time_counter, reset_time), 5, 0)}\n") #nmos
            if(i % batch == 0):                                                            #this could cause issues if rows = 10     
                time_counter += reset_time + 1
        
        if(rows % batch != 0):
            time_counter += reset_time + 1                  #This could cause extra delay if the above if statement is executed on the last loop (rows % batch = 0)

        for i in range(1, cols + 1):
            f.write(f"V_C{i}_Vdd C{i}P 0 {pwl((0, time_counter - time_init), 0, 8)}\n")   #pmos

        #time_counter += reset_time + 10         #delay between reset and programming phases
        program_start = time_counter

        pulse_matrix = []                       #pulse matrix for access transistor pulses

        max_row_program_time = 0
        ##row programming pulses##
        for i in range(1, rows + 1):
            row_program_time = 0
            pulses = []
            for j in range(1, cols + 1): 
                if(weights):
                    pulse_width = weights[i - 1]
                else:
                    pulse_width = i % 48                    #default pulse width
                pulse = (time_counter + row_program_time, pulse_width)         
                pulses.append(pulse)        
                row_program_time += 10 + pulse_width                     #delay between each device programming (delay + pulse width)
            
            f.write(f"V_R{i}_Vdd R{i}P 0 {pwl(pulses, 0, 5)}\n")         #row pulse programming input into PMOS
            pulse_matrix.append(pulses)
            if(row_program_time > max_row_program_time):
                max_row_program_time = row_program_time
            if( i % batch == 0):
                time_counter += max_row_program_time
                max_row_program_time = 0

        time_counter += max_row_program_time

           ##short FTJs to ground during programming (after reset pulse and before inferencing)
        for i in range(1, cols + 1):
            f.write(f"V_C{i}_ground C{i}G 0 {pwl((program_start, time_counter - program_start), 8, 0)}\n")

        time_counter += 10          ##overlap of access transistor switching w/ shorting column to ground is causing unintentional programming

        ##access transistors##
        for i in range(1, rows + 1):
            for j in range(1, cols + 1):
                #pulse = [(time_init + int(i/batch)*(reset_time + 1),reset_time)]                           #add pulse during reset because that is needed for some reason     
                pulse = [reset_pulses[i - 1]]
                pulse.append(pulse_matrix[i-1][j-1])                     #add pulse timed at FTJ row programming pulse
                pulse.append((time_counter, inference_time - 11))      #hold the access transistors high for inferencing
                f.write(f"Vtran{i}_{j} Vt_{i}_{j} 0 {pwl(pulse, 5, 0)}\n")


        time_counter += 10              #delay between programming and inferencing

        f.write(f"V_control Vc 0 PWL(0n 0V {str(time_counter)}n 0V {str(time_counter + 0.001)}n 5V)\n")

        # LIF Cells (Per row)
        for i in range(1, rows + 1):
            f.write(f"X{i} Vin{i} Vout{i} Vdd LIF C1_cap=1p C2_cap=10p\n")
            f.write(f"E{i} N{i} 0 VCVS Vout{i} 0 4\n")
            f.write(f"I{i} 0 Vin{i} PWL(0n 0A {time_counter}n 0A {time_counter + 0.001}n {i*0.5}u)\n")      #1.5uA is the lower limit for spiking within 5u
            f.write(f"ML{i} Vspike N{i} row{i} row{i} nfet L=120n W=1u\n\n")

        # Input Neuron LIFs
        for i in range(1, cols + 1):
            f.write(f"XN{i} VinN{i} VoutN{i} Vdd LIF C1_cap=5p C2_cap=5p\n")
        f.write("\n")

        # Synapses (FTJs) and their connections
        for i in range(1, rows + 1):
            for j in range(1, cols + 1):
                f.write(f"X_FTJ_{i}_{j} row{i} T{i}{j} S{i}{j} BTOFTJ\n")
        f.write("\n")

        # Access transistors for each synapse
        for i in range(1, rows + 1):
            for j in range(1, cols + 1):
                f.write(f"M_{i}_{j} T{i}{j} Vt_{i}_{j} col{j} col{j} nfet L=120n W=2u\n")
        f.write("\n")

        # LIF Access transistors
        for i in range(1, cols + 1):
            f.write(f"MC{i} col{i} Vc VinN{i} VinN{i} nfet L=120n W=2u\n")

        # Programming Transistors
        for i in range(1, rows + 1):
            f.write(f"MR{i}G row{i} R{i}G 0 0 nfet L=120n W=2u\n")      #4u
            f.write(f"MR{i}P row{i} R{i}P Vr Vr pfet L=120n W=8u\n")        
        
        for i in range(1, cols + 1):
           f.write(f"MC{i}P col{i} C{i}P Vr Vr pfet L=120n W=8u\n")
           f.write(f"MC{i}G col{i} C{i}G 0 0 nfet L=120n W=4u\n")       #8u
           f.write(f"MC{i}G1 col{i} C{i}G 0 0 nfet L=120n W=4u\n")       #8u

        # Transient simulation
        f.write(f".tran 10n {time_counter + inference_time}n\n\n")

        # Print statements

        for i in range(1, rows + 1):
            f.write(f".print tran V(row{i})\n")
        for j in range(1, cols + 1):
            f.write(f".print tran V(VinN{j})\n")
            f.write(f".print tran V(VoutN{j})\n")
            f.write(f".print tran V(col{j})\n")
        for i in range(1, rows + 1):
            for j in range(1, cols + 1):
                f.write(f".print tran V(S{i}{j})\n")
        for i in range(1, rows + 1):
            f.write(f".print tran V(Vout{i})\n")
        f.write("\n")

        if(True):
            for i in range(1, rows +1):
                f.write(f".print tran V(R{i}G)\n") #nmos
                f.write(f".print tran V(R{i}P)\n")   
            for i in range(1, cols + 1):
                f.write(f".print tran V(C{i}P)\n")   #pmos
                f.write(f".print tran V(C{i}G)\n")

            for i in range(1, rows + 1):
                for j in range(1, cols + 1):
                    f.write(f".print tran V(Vt_{i}_{j})\n")
                    f.write(f".print tran V(T{i}{j})\n")

        f.write(f".print tran V(Vc)\n")
        
     
        # Initial conditions
        for i in range(1, rows + 1):
            f.write(f".IC V(Vin{i}) = 0V\n")
        f.write("\n.end\n")

def main():
    if(rows > 10 or cols > 10):
        weights = read_weights("weights.csv")

        for i in range(1, cols + 1):
            now = time.time()
            generate_hspice(file_name, weights [i-1])
            output_file_name = f"lif_array_{rows}_{i}"
            run_hspice(path, file_name, output_file_name)
            print(time.time() - now)
    else:
        generate_hspice(file_name)
        run_hspice(path, file_name, file_name)


main()

